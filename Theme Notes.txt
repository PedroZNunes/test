Project: WordPress Development - Themes, Plugins & Gutenberg
URL: https://www.udemy.com/wordpress-development-create-wordpress-themes-and-plugins/

=========================>
Geral:
    Esse curso nao usa e abusa de OOP. Ele eh mais funcional, o
    que pode ser meio broxante, mas eh curioso de ver como 
    ele vai fazer tudo funcionar


8. File Headers
    - O requerimento minimo absoluto pra que o WP reconheca 
    o tema eh ter 2 arquivos, um index.php e um style.css
    com file header.
    - O file header eh um bloco de comentario no comeco do
    arquivo que contem informacoes diversas sobre o tema
    (ou plugin) 
    - A informacao no header eh chamada meta-information.
    - O formato do header eh nome: valor
    - O Text Domain eh um ID unico para traducao

9. Functions File & Action Hooks
    - O arquivo functions.php pode ser pensado como a parte
    logica do seu tema. O arquivo eh totalmente opcional.
    Ele eh lido depois do tema ser carregado. 
    - Action hooks sao eventos em aberto que sao chamados em
    certos momentos e servem pra vc colocar seu script no flow
    do site.
    - Filters sao um tipo de hook que sempre passam e retornam certo valor.
    Esses servem pra voce alterar os valores padroes do WP
    - Action hook API: add_action ('evento_padrao_wp', 'funcao_custom_callback')

10. Loading Styles and Scripts with enqueues
    - Registrar uma stylesheet serve pra contar ao wordpress sobre a stylesheet 
    e deixar ela pronta para uso em algum momento oportuno.
    - Enqueue uma stylesheet serve pra vc dizer ao wordpress para carregar aquela
    stylesheet na pagina imediatamente.
    - wp_head() e wp_footer() sao hooks que vc chama em algum ponto da pagina para 
    dizer ao wordpress aonde eh q esta o head e o footer. eles sao usados por plugins
    e funcoes para carregar meta tags, scripts e styles. wp_enqueue_scripts por exemplo,
    depende desses hooks pra saber aonde executar os scripts.
    - Wordpress da enqueue por default em varias ferramentas por padrao, incluindo
    jquery, ajax, e muitas outras. quando usar alguma ferramente, melhor checkar se
    o wordpress ja nao tem ela registrada e se sim, melhor usar o q o wordpress tem a oferecer.

11. Cache
    - O problema endereçado nessa aula é o reload dos mesmos arquivos toda vez que o site eh atualizado
    QUando em desesnvolvimento eu quero que os arquivos novos q eu mexi sejam lidos pelo servidor, 
    e nao as versoes antigas.
    - Esse capitulo endereça esse problema criando uma constante para dizer se esta em desenvolvimento
    ou nao. Se estiver, ele da append no tempo (time()) ao fim do nome do arquivo pra que o site veja
    q eh um arquivo diferente e o carregue.

12. Adding Dummy Content
    - Aqui a gente baixa um plugin q gera conteudo dummy e usa ele pra gerar um monte de posts e pessoas

13. Menu Support
    - Usar menus no wordpress é bem semelhante a registrar styles e scripts. Você não usa o 
    menu em HTML, vc usa o default do wordpress.
    - Primeiro vc registra o menu usando register_nav_menu, dando pra ele um ID e uma descrição
    - Depois no lugar do menu HTML vc da uma checkada se o menu com o ID q vc criou existe
    usando has_nav_menu () e se existir, chama o menu usando wp_nav_menu.
    - wp_nav_menu recebe como parametro uma array nomeada que pode conter vaarios parametros,
    com coisas tipo IDs classes, se o container vai ser div ou nav, o location do tema (o ID do menu), 
    depth, etc.
    - Esses parametros sao importantes pra conseguir montar um menu q seja bem semelhante ao do HTML.
    Se o nivel de cusotmização dessa função não for o suficiente pra conseguir que o CSS original funcione
    como esperado, voce pode usar Walkers.
    - Walkers sao funções que servem pra caminhar pelas arrays (e possíveis arrays dentro de arrays) e 
    executar comandos em cada passo. São muito uteis para essa criação de menus.
    - The register_nav_menu() function will automatically call the add_theme_support( ‘menus’ ) function

14. Aside: Menu Walker
    - Aqui ele vai ensinar a programar e usar walkers, mas nao tem necessidade de 
    usar walkers nesse projeto então eu vou só pular essa parte ateh ter terminado essa seção

15. Creating Header & Footer Areas
    - Para criar um header padrão, só separar (se no template já tiver um header criado) em um arquivo
    diferente chamado header.php e usar a função get_header
    - Para criar um footer padrão é só separar o footer em um arquivo e depois n apágina aonde vc quer
    aquele footer chamar get_footer()
    - Se vc quiser usar outro header que não o padrão que vc criou, vc pode soh dar append no nome com 
    qualquer coisa (por exemplo "-v2") e depois na função get_header passar o parâmetro "v2".
    O nome dos arquivos é forçado pleo wordpress pois ele procura o header e footer pelos nomes (header e footer)
    quando vc chama get_header/get_footer.
    - Body_class deve ser usado dentro da tag <body> (literalmente antes de fechar a tag).
    Aqui vc usa os parametros pra mandar quaisquer classes custom q vc tenha no seu body e essa função
    permite também que o próprio wordpress adcione algumas classes padrão pra que plugins possam extender seu código
    usando essas classes.

16. Creating Sidebars and Widget Areas
    - Criar sidebar eh parecido com criar headers e footers
    - Primeiro, separamos a parte condizente a sidebar em um arquivo sidebar.php (naming conventions eh
    forçada aqui, assim como para headers e footers),
    - Depois, chamamos esse arquivo com get_sidebar no template aonde queremos a sidebar. Essa função vai procurar
    por sidebar.php automaticamente.
    - Para registrar a sidebar (e aparecer no dashboard pra podermos enchê-la de widgets), usamos register_sidebar().
    Essa função aceita 1 parâmetro, uma array. Nesse projeto ela foi colocada dentro do seu próprio arquivo
    widgets.php e inclusa no functions.php
    - Depois de registrada, para que a sidebar apareça na tela precisamos chamá-la no arquivo sidebar.php.
    - A gente faz isso testando se a sidebar existe com is_active_sidebar() e, se true, chamamos dynamic_sidebar()
    pra que ele use as settings do wordpress q colocamos no dashboard.
    - Para que a sidebar fique do jeito que queremos, podemos ou reciar os widgets do nosso jeito e ter total 
    controle sobre eles. Ou podemos ir olhando no source code as classes usadas na sidebar e usar um arquivo .css
    para fazer a formatação. Essa segunda opção é mais fácil.
    - É importante manter o CSS e HTML das sidebars em um minimo para que fique mais fácil de dar manutenção
    com wordpress.

17. Formatting the Search Form
    - A função get_search_form eh responsavel por procurar o arquivo searchform.php e incluí-lo. Caso ela
    não encontre nenhum arquivo com esse nome, ela mesma gera um search form padrão.
    - Nós criamos um arquivo searchform.php para servir como padrão para o widget. 
    - As coisas básicas pra se preencher no form são:
        - Input name: deve ser 's'
        - method: get
        - action: home_url('/')
        - current search value: <?php the_search_query(); ?>
    
18. The Loop
    - O loop eh um mecanismo do wordpress para iterar sobre os posts e tomar ações de acordo com o requerido
    pelo usuario em cada post. O numero de posts, os tipos, as categorias, eh tudo customizavel.
    - O loop eh caracterizado por uma condicional perguntando se ha posts, depois um loop para retornar
    enquanto houver posts e dentro desse loop um The_post para que o programa atualize o post atual da lista,
    efetivando a iteração.
    - Para adicionar features ao tema, da pra usar add_theme_support() aonde o parametro de texto e cada 
    texto inputado atualizadopode significar uma feature diferente. por exemplo nessa aula adicionamos o
     post thumbnail a todos os posts, permitindo que eles tenham uma imagem de preview.

19. Template parts
    - Template parts sao maneiras de vc manter o código principal limpo enquanto apenas importando as parametros
    reutilizaveis que são importantes para aquela página.
    - É como usar get_header, mas funciona para qualquer arquivo. Ele faz alguns checks e depois da require
    no arquivo que voce pediu se ele existir.
    - Uma pequena diferença é que get_template_part usa 2 argumentos. Ele basicamente tenta primeiro-segundo
    concatenados. Se ele nao achar, ele tenta procurando soh pelo nome do primeiro parametro. Isso funciona
    como um backup pra garantir que va haver algum arquivo pra ele incluir. 
    - Outra vantagem eh que essa função sempre procura os arquivos de acordo com a pasta root do tema instalado e ativo.
    - A pasta partials serve aqui como a pasta para guardar esses arquivos parciais.
    - No exemplo aqui eu deixei tudo no primeiro parametro pra ficar igual ao video, mas se por exemplo
    eu fosse utilizar algum template pra algum parametro especifico, tipo um mes, eu poderia deixar o arquivo
    ser content-december e usar como 2 parametros get_template_parts('content', 'december') e deixar que os outros
    templates usassem apenas content.php, e ja usar isso como template generico.

20. Template tags
    - Template tags ajudam a separar a logica envolvida em pegar os dados dinamicamente e o html da pagina
    - As template tags funcionam em conjunto com o loop (the loop) para pegar tudo que eh tipo de dados sobre
    o autor, o post, categorias, thumbnails, enfim. Elas sao o q transformam o template html de um post em um
    template funcional e dinamico q se aplica a todos os posts do loop. 
    - O wordpress cuida de praticamente tudo sozinho com relação a banco de dados.
    - Cuidado ao usar the_date(). Tem alguns problemas com essa função, eh melhor ecoar get_the_date().
    - Algumas funções são get e algumas não tem get. As template tags que começam com get não ecoam o valor,
    apenas o retornam, enquanto as funções sem get ecoam o valor para fora da função. 
    - por exemplo the_author ecoa o nome do autor para o html enquanto get_the_author retorna o nome do autor 
    para uma variavel. 
    - Thumbnails de posts vem em varios tamanhos, o default eh 'full'. Por default tem 4 tamanhos que o 
    wordpress define pra você. 

21. Pagination
    - Wordpress usa 2 funcoes pra paginação: next_posts_link e previous_posts_link. 
    Nelas vc pode por uma string com o q quer q apareça
    no botão. Bem simples. Difícil eh customizar pra ficar do jeito q vc quer.


========== Seção 2 ===========
23. Template Hierarchy & Single Post Template
    - A hierarquia de templates é o que o wordpress usa pra definir qual template será usado para dar 
    display na página. O default absoluto é o index.php, mas há uma página de referência salva com 
    um diagrama completo com os nomes dos arquivos que o wordpress procura na hora de dar Load
    nos templates.
    - O theme development codex do wordpress tem diretivas e sugestões sobre o que cada template deve ter.
    - O wordpress te permite fazer paginação automaticamente a partir da função wp_link_pages(). 
    Basta inserir um page break no post que o wordpress separa ele em páginas.
    - Usar next_post_link e previous_post_link para mostrar links para os posts criados anterior e 
    posteriormente.
    - A forma plural das funções acima deve ser usada para páginas com multiplos posts, enquanto a 
    versão singular é para posts singulares.

24. Comments
    - comments_template() busca por comments.php. igual get_header e get_footer.
    - no comments.php a gente começa com u check pra ver se o post requer password e retorna verdadeiro
    se o post requerir password E se o usuario nao estiver logado. no caso ele da um return q eh pra n
    mostrar o resto dos comments. 
    - Segundo o cara do curso a gente faz isso soh nos comments pq o comments.php eh usado em qualquer
    lugar do site e no post isso nao é necessário pois o wordpress já cuida dessa verificação automaticamente.
    - Para fazer o formulario de comentarios, a gente usa a fun;'ao comment_form(). Ela é fundamental pois
    pode ser extendida por plugins e possui uma infinidade de argumentos que podem ser passados.
    - A funcao comment_form checka se o user ta logado e pode escrever comments, tambem checka se o post
    esta aberto a receber comments e se encarrega de mandar a informacao correta do post no comentario. 
    - wordpress salva todos os comments dentro de uma variavel global chamada comments, a qual esta disponivel
    para acesso atraves de loops.

25. Author Template Tags
    - Usar a versão get da função se vc quiser formatar o valor antes de ecoa-lo
    - NL2BR eh uma função de PHP que formata novas linhas para a tag <BR>

26. WP_Query & Related posts
    - A WP_Query eh a classe mais utilizada por developers em wordpress.
    - Ela ajuda a fazer a ponte entre o request da pagina/post e o servidor.
    - O loop principal ja utiliza essa classe para checkar se ha posts e pra fazer o loop entre eles.
    - Criar uma instancia diferente da WP_Query pode servir como um segundo loop para conseguir uma segunda
    lista de posts por qualquer q seja o motivo (related posts, recent posts, FAQ, etc.)
    - Ela é uma class bem documentada e cheia de opções. 
    - Nesse projeto começamos a utilizar wp_query na single.php aonde criamos um segundo feed de posts para
    preencher a parte de related posts. Damos a query o numero maximo de posts, uma categoria para ela procurar
    e limitamos os posts retornados por ID (no caso para não retornar o mesmo post que a pessoa está lendo)
    - Depois de instanciada ela funciona como o loop principal, mas você chama as funções direto da intancia nova
    - Importante: depois de usar o loop, deve-se usar a função wp_reset_postdata() para resetar o The_post
    para o loop principal.

27. Page.php
    - Wordpress procura por page.php para templates de paginas.
    - Geralmente as páginas são versões mais simples dos posts, mas depende um pouco do developer.
    - Não é necessário checkar se há posts antes do loop pois se não houver o wordpress redireciona a página
    para o 404. 
    - Quando reutilizar o mesmo main loop, é necessário resetá-lo usando a função rewind_posts
    antes de utilizá-lo novamente.
    - Inicialmente tinha criar um outro The loop soh pra conseguir o titulo da pagina, mas existe uma
    função chamada single_post_title que faz exatamente isso sem a necessidade de outro loop.
    - Quando usar alguma função proveniente de um plugin, é uma boa ideia checkar se a função existe antes
    usando function_exists(). Assim se você desativar o plugin vc pode implementar uma lógica de backup.

28. 404 and Category
    - the_archive_title() eh um tipo especial de template tag que não precisa estar no loop. Ele olha dentro
    da query principal e pega o titulo do arquivo. Wordpress considera esse template um template de arquivo.
    - Um template de categoria nada mais é do que um template de arquivo só que focado em apenas uma
    categoria.

29. Date Template
    - Date templates não são muito utilizados porque o wordpress não dispoe de muita flexibilidade
    com relação às datas.
    - Se não há posts para uma certa data, você nem carrega esse template, mas carrega direto o 404.
    - Esse template parece um monte de problemas, o código exemplo no template hierarchy é bem complexo
    e tudo tem que ser convertido em datas e testado na mão. 

30. Attachment templates
    - Para attachments, a ordem de prioridade de páginas a serem carregadas é index, singular, single,
    single-attachment-{slug}, attachment e {mime-type}.php
    - Uma boa ideia eh cercar o print_r com <pre> pra melhor visualização quando quiser saber
    o conteudo de alguma variável.
    - Você pode criar um attachment.php e deixar que todos os attachments caiam no mesmo template
    ou você pode usar o mime type (image, video, audio, application, etc.) como nome do arquivo
    e preparar um template especifico para aquele tipo de arquivo.
    - se você deixar a cargo do wordpress ele usa a single.php e mostra os attachments por conta, mas
    se vc criar um attachment.php, entao o wordpress deixa de mostrar o attachment sozinho e voce passados
    a ter controle cobre como aquele attachment eh visualizado.

31. Search and Custom templates
    - A função the_search_query() retorna os termos que o user pesquisou
    - O search.php eh utilizado pra mostrar resultados de busca. 
    - Custom templates te permitem ter opções diferentes de templates para páginas.
    - Custom templates podem ter o nome que for, contanto que você dicione um header "template name: "
    para que ele apareça na hora de editar a página no wordpress. em page attributes na sidebar eh q aparecem
    as opções de templates.
    - Custom templates podem ser usados para posts também, basta incluir no header "Template Post Type:"
    e o tipo de post.

32. Header, Title and Ad Section
    - No arquivo setup.php a gente usa o add_theme_support pra permitir que o user upe uma logo custom e 
    pra que vc possa puxar o titulo do blog dinamicamente atraves de the_custom_logo e has_custom_logo
    - informacoes sobre o blog podem ser puxadas atraves da funcao bloginfo(). ha varias coisas q podem ser
    requested usando essa funcao.
    - Integrar plugins ao seu tema pode aumentar o valor do tema e sua flexibilidade

33. Theme Customizer API
    - 'customize register' eh o nome do hook usado para começar a editar o Customizer
    - 'customize register' recebe um objeto com metodos e propriedades para customizar o theme customizer
    como parâmetro da função. Esse parâmetro é o wp_customize, uma instance da classe WP_Customize_Manager
    - O customizer tem 3 partes:
        - Setting: A opção usada para salvar o valor diretamente no banco de dados
            - $wp_customize->add_setting($id, $args)
        - Section: Uma maneira de agrupar os campos
            - $wp_customize->add_section($id, $args)
        - Controller: Um input field colocado dentro de uma seção que te permite mudar o valor
        da setting no banco de dados diretamente. Esse controller pode ser uma radiobox, uma checkbox,
        um text field, enfim.
            - Tem 2 maneiras de utilizar o controller, uma delas seria colocar as settings manualmente
            e criar os campos manualmente. Assim teria mais controle sobre tudo, o que me lembra 
            como eu fiz pra criar campos de opções no plugin.
            - O outro jeito eh usar a classe WP_Customize_Control (ou alguma das suas subclasses) pra que 
            ele crie os campos pra voce e te ajude. Esse segundo metodo eh mais simples.    
            - $wp_customize->add_control( WP_Customize_Control $obj )
    - Depois de registrar a setting, a gente usa get_theme_mod( 'pu_setting_name_handle' ) como nome 
    da setting pra pegar a opção do banco de dados. Como no caso são caixas de texto, eu pego o valor
    do banco de dados e uso para fazer os links com as midias sociais no header e no footer, bem como
    para linkar numero de telefone e e-mail.
    - Do jeito q foi feito, se a opção não for setada no customizer, o icone com a midia social não aparece.

34. Dropdown & Checkboxes using API
    - Dá pra criar checkboxes mudando o campo type para checkbox
    - A chave choices eh usada para setar os valores da heckbox, enquanto a chave value vai ser um texto
    legível
    - Dá pra criar um dropdown para que o user escolha uma página usando dropdown-pages. A chave default
    pode ser setada para 0 se vc não quiser que nenhuma página seja escolhida como default.
    - O dropwdown-pages retorna o ID do post ou página. Para utiliza-lo como link, eh preciso usar 
    o template tag the_permalink() e passar o id do post, no caso o valor da setting.
    
35. Customizer Transports and Overriding existing settings
    - Hierarquia do customizer
        - Paineis
        - Seções
        - Controladores
    - No theme-customizer eu criei uma função chamada pu_edit_site_identity pra editar uma setting padrão.
        - Para editar um controller, eh get_control( $id )
        - Panel, get_panel( $id )
        - Setting, get_setting( $id ).
    - Depois voce seleciona a variavel ocmo se fosse uma propriedade publica e seta o valor.
    - Para pegar o Id, basta dar dump no objeto wp_customize e caçar o ID pelo titulo.
    - Nessa aula fizemos uma modificação na interação do customizer.
        - nós mudamos o tipo de 'transport' de 'refresh' para 'postMessage'. Isso faz com que, ao inves de
        a pagina dar refresh toda vez que voce alterar o controle no painel do customizer, ele deixa dependente
        de um JS atualizar o preview.
        - Isso faz com que a gente tenha que criar uma função em php pra dar enqueue num arquivo javaScript
        que vai responder a um hook. O hook utilizado eh o customize_preview_init, que eh chamado quando
        o customizer da load, e serve para carregar arquivos CSS e JS.
        - Ao dar enqueue passamos 2 dependencias, uma eh jquery e a outra chama customize-preview, que serve
        para passar algumas variáveis e métodos que facilitam lidar com o customizer. 
        - no arquivo JS usamos js para checkar o valor da setting e atualizar a pagina de acordo, no caso
        apenas usando .show e .hide para fazer os botoes aparecerem e sumirem.
        - Por fim, essa mudança serve soh pra q não fique havendo refresh da página e não é algo intuitivo de
        mexer, apesar de o exemplo deixar uma base bem boa para quando eu quiser replicar isso em um tema de verdade.
    
36. Color & Upload COntrollers for the Customizer
    - no enqueue.php da pasta front, aonde tem todos os enqueues de styles e scripts que afetam a pagina, 
    eu dei enqueue num inline style que da pra programar como string direto no parametro da funcao
    - Isso foi feito para que eu pudesse fazer com que as mudanças nas settings afetassem a página de forma simples.
    - alternativamente a inline css eu posso criar um arquivo php pra carregar o css dinamico e trocar os headers.
    - o controle Upload File retorna o url completo do arquivo upado

37. Theme Support & Creating Starter Content
    - Com add theme support a gente pode adicionar features ao nosso site, como suporte html5, logos custom, 
    rss automatico e starter-content
    - o theme support starter-content serve o propósito de criar posts, menus, widgets, entre outros, como dummy
    content ao momento que o user aplica o tema. 
    - Ele é muito útil pois gera conteúdo, o que torna o tema bem mais óbvio e interessante.
    - Se quiser simular um site novo, mude a key fresh_site para 1 e vc vai ver instalados o starter-content.

38. Display Popular Posts and Conditional Tags
    - Integração do plugin wordpress popular posts.
    - Agora aquela barrinha de breaking news mostra os posts mais populares all time.
    - Tem opção pra mostrar ou não a barra no customizer.
    - Conditional tags são uma boa maneira de descobrir que pagina esta sendo vista.

39. Final Touches
    - language_attributes no lugar de fazer hardcore da language no header.php
    - funcao charset pra definir os caracteres dinamicamente.
    - adicionamos um id para o div de cada post usando o the_ID() pra gerar um id unico pra cada post.
    - fizemos uso da função post_class pra que o wordpress adicione as classes comuns para posts.
    Isso melhora conexão com plugins e facilita customização. Adicionamos as classes custom como parâmetro.
    
 41. Template Tags Overview
    - A versão get das template tags retorna o valor, enquanto a versão sem o get imprime o valor.
    - Criada página experimental pra brincar com tags.

42. General Tags
    - São tags que não se encaixam em nenhuma categoria.
    - Exemplos são:
        - Includes
            - São funções que se encarregam de carregar um template dentro de outro template
            - Exemplos: get_header() get_footer(), get_sidebar(), get_template_part(), get_search_form(), comments_template()...
        - Login
            - Exemplos: 
                - wp_loginout():                    providencia links para página de login ou logout, dependendo se o user está logado.
                - wp_logout_url(), wp_login_url():  providencia urls para as páginas de login e logout.
                - wp_login_form():                  imprime um simples form de login
                - wp_lostpassword_url():            retorna o link para a pagina de recuperação de password
                - wp_register():                    retorna o link para a página de registro de usuário.
                - is_user_logged_in():              retorna true/false dependendo se o usuario esta logado
        - Bloginfo
            - Retorna info sobre o site. Retorna apenas 1 valor. Recebe 1 parâmetro.
            - Essa função é muito antiga. Muitas outras funções já saíram pra facilitar pegar alguns valores.
            - Sempre que pensar em pegar valor com bloginfo, olhar se não tem nenhuma função indicada no texto.
        - Archive
            - O arquivo é complexo.
            - Os posts podem ser categorizados por terms, category, tag, date, taxonomies, etc.
            - Tem muita informação que vai num post. Então durante muito tempo foi muito estranho pois vc tem um monte de função chamando outras funções e todas acabam chamando meio q a mesma função, soh q elas tem assinaturas diferentes e eh uma zona. Então no 4.71 sei lá, eles fizeram q função the_archive_title. 
            - Função de Título:
                - the_archive_title():              Essa função faz os checks pra ver o tipo de categoria e automatiza o processo, além de não                                            precisar se preocupar com single_cat_title, single_post_title e single_term_title etc...
        - Calendar
            - Não são usadas muito.
            - Exemplos:
                - calendar_week_mod():              Retorna o numero de dias desde o começo da semana
                - get_calendar():                   Retorna um calendário em formato de tabela.
                - delete_get_calendar_cache():      Deleta o cache do calendario deixado por get_calendar()
        - Other Tags
            - wp_meta():                            Uma função pra representar uma action do_action('wp_meta'), que dispara antes de mostrar o conteúdo ecoado na sidebar.
            - get_current_blog_id():                retorna o id do blog... 
            - wp_title():                           retorna o titulo da pagina/post.
            - allowed_tags():                       retorna uma lista de tags de html que sao permitidas no post
            - wp_enqueue_script():                  registra um script js e o enfileira para execução.
        - Nav Tags
            - wp_nav_menu():                        mostra um menu de navegação
        - Link Tags
            - Há 2 maneiras de acessar a página de search, uma delas eh pelo URL /search/term, a outra eh adicionando uma query na URL
            /udemy/?s=test
            - As link tags providenciam links e urls. 
        
Fim da parte de temas. Vou separar as notes.
        